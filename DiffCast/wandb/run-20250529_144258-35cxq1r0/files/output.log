============================================================
                 Experiment Start
============================================================
Distributed environment: NO
Num processes: 1
Process index: 0
Local process index: 0
Device: cuda

Mixed precision type: bf16

train data: 71436, valid data: 20, test_data: 20
Pixel Scale: 255.0, Threshold: (16, 74, 133, 160, 181, 219)
Main Model Parameters: 46.30M
============ Running training ============
    Num examples = 71436
    Num Epochs = 1
    Instantaneous batch size per GPU = 1
    Total train batch size (w. parallel, distributed & accumulation) = 1
    Total optimization steps = 71436
optimizer: AdamW (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.95)
    capturable: False
    decoupled_weight_decay: True
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    initial_lr: 0.0001
    lr: 0.0
    maximize: False
    weight_decay: 0.0
) with init lr: 0.0001
Data Loading Time: 0.13529443740844727
True
gpu_nums: 1, gpu_id: 0
Load checkpoint /home/vatsal/NWM/DiffCast/Exps/basic_exps/Difffno_sevir_None/checkpoints/ckpt-10000.pt from /home/vatsal/NWM/DiffCast/Exps/basic_exps/Difffno_sevir_None/checkpoints
  0%|                                                                                                                                                                       | 0/71436 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/home/vatsal/NWM/DiffCast/run.py", line 575, in <module>
    main()
  File "/home/vatsal/NWM/DiffCast/run.py", line 564, in main
    exp.train()
  File "/home/vatsal/NWM/DiffCast/run.py", line 410, in train
    loss_dict = self._train_batch(batch)
  File "/home/vatsal/NWM/DiffCast/run.py", line 485, in _train_batch
    _, loss = self.model.predict(frames_in=frames_in, frames_gt=frames_out, compute_loss=True)
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 952, in predict
    loss = self._predict(frames_in, frames_gt)
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 966, in _predict
    backbone_out, backbone_loss = self.backbone_net.predict(frames_in, frames_gt, compute_loss=True)
  File "/home/vatsal/NWM/DiffCast/models/fno.py", line 13, in predict
    out = self.model(frames_in)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/neuralop/models/fno.py", line 378, in forward
    x = self.fno_blocks(x, layer_idx, output_shape=output_shape[layer_idx])
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/neuralop/layers/fno_block.py", line 277, in forward
    return self.forward_with_postactivation(x, index, output_shape)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/neuralop/layers/fno_block.py", line 292, in forward_with_postactivation
    x_fno = self.convs[index](x, output_shape=output_shape)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/neuralop/layers/spectral_convolution.py", line 420, in forward
    x = torch.fft.rfftn(x, norm=self.fft_norm, dim=fft_dims)
RuntimeError: Unsupported dtype BFloat16
