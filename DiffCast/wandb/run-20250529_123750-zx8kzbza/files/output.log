============================================================
                 Experiment Start
============================================================
Distributed environment: NO
Num processes: 1
Process index: 0
Local process index: 0
Device: cuda

Mixed precision type: bf16

train data: 71436, valid data: 16887, test_data: 20
Pixel Scale: 255.0, Threshold: (16, 74, 133, 160, 181, 219)
Main Model Parameters: 48.87M
============ Running training ============
    Num examples = 71436
    Num Epochs = 1
    Instantaneous batch size per GPU = 1
    Total train batch size (w. parallel, distributed & accumulation) = 1
    Total optimization steps = 71436
optimizer: AdamW (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.95)
    capturable: False
    decoupled_weight_decay: True
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    initial_lr: 0.0001
    lr: 0.0
    maximize: False
    weight_decay: 0.0
) with init lr: 0.0001
Data Loading Time: 0.1059732437133789
True
gpu_nums: 1, gpu_id: 0
  0%|                                                                                                            | 0/71436 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/home/vatsal/NWM/DiffCast/run.py", line 567, in <module>
    main()
  File "/home/vatsal/NWM/DiffCast/run.py", line 556, in main
    exp.train()
  File "/home/vatsal/NWM/DiffCast/run.py", line 409, in train
    loss_dict = self._train_batch(batch)
  File "/home/vatsal/NWM/DiffCast/run.py", line 477, in _train_batch
    _, loss = self.model.predict(frames_in=frames_in, frames_gt=frames_out, compute_loss=True)
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 951, in predict
    loss = self._predict(frames_in, frames_gt)
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 992, in _predict
    _, noise_loss = self.p_losses(res, t, cond=cond, ctx=global_ctx if frag_idx > 0 else local_ctx, idx=torch.full((frames_in.shape[0],), frag_idx, device=frames_in.device, dtype=torch.long))
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 1006, in p_losses
    model_out = self.model(x_t, t, cond=cond, ctx=ctx, idx=idx)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/vatsal/NWM/DiffCast/models/diffcast.py", line 546, in forward
    x = self.init_conv(x)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 554, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/vatsal/miniconda3/envs/earthformer/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 549, in _conv_forward
    return F.conv2d(
RuntimeError: Given groups=1, weight of size [64, 20, 7, 7], expected input[1, 12, 384, 384] to have 20 channels, but got 12 channels instead
